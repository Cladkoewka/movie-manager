basePath: /
definitions:
  dto.MoviesResponse:
    properties:
      movies:
        items:
          $ref: '#/definitions/model.Movie'
        type: array
      total:
        type: integer
    type: object
  model.Movie:
    properties:
      description:
        type: string
      director:
        type: string
      duration:
        type: integer
      genre:
        type: string
      id:
        type: integer
      language:
        type: string
      rating:
        type: number
      release_date:
        type: string
      title:
        type: string
      trailer_url:
        type: string
    type: object
  model.MoviePoster:
    properties:
      created_at:
        type: string
      id:
        type: integer
      mime_type:
        type: string
      movie_id:
        type: integer
      poster:
        items:
          type: integer
        type: array
    type: object
  model.Review:
    properties:
      comment:
        type: string
      id:
        type: integer
      movie_id:
        type: integer
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a simple Movie Manager API
  title: Movie Manager API
  version: "1.0"
paths:
  /movies:
    get:
      consumes:
      - application/json
      description: Get paginated list of movies with optional filters
      parameters:
      - description: Search term for movie title
        in: query
        name: search
        type: string
      - description: Genre of the movie
        in: query
        name: genre
        type: string
      - description: Language of the movie
        in: query
        name: language
        type: string
      - description: Minimum rating of the movie (0-10)
        in: query
        name: rating
        type: number
      - description: Field to sort by (e.g. 'title', 'rating')
        in: query
        name: sort_by
        type: string
      - description: 'Sort order: ''asc'' or ''desc'''
        in: query
        name: order
        type: string
      - description: Page number for pagination
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MoviesResponse'
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get all movies
      tags:
      - movies
    post:
      consumes:
      - application/json
      description: Add a new movie to the database
      parameters:
      - description: Movie details
        in: body
        name: movie
        required: true
        schema:
          $ref: '#/definitions/model.Movie'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Movie'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Create a new movie
      tags:
      - movies
  /movies/{id}:
    delete:
      consumes:
      - application/json
      description: Remove a movie from the database by its ID
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Delete a movie by ID
      tags:
      - movies
    get:
      consumes:
      - application/json
      description: Get a movie details by movie ID
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Movie'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      summary: Get a movie by ID
      tags:
      - movies
    put:
      consumes:
      - application/json
      description: Update the details of an existing movie
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      - description: Movie details
        in: body
        name: movie
        required: true
        schema:
          $ref: '#/definitions/model.Movie'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Movie'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Update an existing movie
      tags:
      - movies
  /movies/{id}/poster:
    get:
      description: Get the poster of a movie by its ID
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.MoviePoster'
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get a movie poster by movie ID
      tags:
      - movies
    post:
      consumes:
      - multipart/form-data
      description: Upload a poster for a movie by its ID
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      - description: Movie Poster
        in: formData
        name: poster
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Upload a movie poster
      tags:
      - movies
  /movies/{id}/trailer:
    post:
      consumes:
      - multipart/form-data
      description: Uploads a trailer file for a specific movie and stores it in B2
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      - description: Trailer file
        in: formData
        name: trailer
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Upload movie trailer
      tags:
      - Movies
    put:
      consumes:
      - application/json
      description: Sets a new trailer URL for a specific movie
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      - description: Trailer URL
        in: query
        name: url
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Set movie trailer URL
      tags:
      - Movies
  /reviews:
    post:
      consumes:
      - application/json
      description: Create a new review for a movie
      parameters:
      - description: Review payload
        in: body
        name: review
        required: true
        schema:
          $ref: '#/definitions/model.Review'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Review'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a review
      tags:
      - reviews
  /reviews/{id}:
    delete:
      description: Delete a review by ID
      parameters:
      - description: Review ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete a review
      tags:
      - reviews
  /reviews/movie/{movie_id}:
    get:
      description: Get all reviews by Movie ID
      parameters:
      - description: Movie ID
        in: path
        name: movie_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Review'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get all reviews for a movie
      tags:
      - reviews
schemes:
- http
swagger: "2.0"
